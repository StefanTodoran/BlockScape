#version 400 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void) {
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLight = normalize(toLightVector);

	float brightenFactor = 10; // TODO: get this from light like lightColor
	float lightDist = max(1, length(toLightVector) / brightenFactor);
	
	float light = dot(unitNormal, unitLight);
	float brightness = max(light, 0.01);
	// vec3 diffuse = brightness * lightColor / lightDist;
	vec3 diffuse = lightColor / lightDist;
	
	vec3 unitCamera = normalize(toCameraVector);
	vec3 reflectedLight = reflect(-unitLight, unitNormal);
	float specFactor = dot(reflectedLight, unitCamera);
	specFactor = max(specFactor, 0.0);
	float dampedFactor = pow(specFactor, shineDamper);
	vec3 specular = dampedFactor * reflectivity * lightColor;
	
	outColor = vec4(diffuse, 1) * texture(textureSampler, textureCoords) + vec4(specular, 1.0);
	// outColor = texture(textureSampler, textureCoords);
}