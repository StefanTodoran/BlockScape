#version 400 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float fogFadeAmnt;
in float reflectAmnt;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
// uniform float shineDamper;
// uniform float reflectivity;
uniform vec3 skyColor;

const float shineDamper = 15;
const float reflectivity = 0.3;

void main(void) {

	vec4 textureColor = texture(textureSampler, textureCoords);
	if (textureColor.a == 0) {
		discard;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLight = normalize(toLightVector);

	float brightenFactor = 10; // TODO: get this from light like lightColor
	float lightDist = max(1, length(toLightVector) / brightenFactor);
	
	float light = dot(unitNormal, unitLight);
	float brightness = max(light, 0.01);
	// vec3 diffuse = brightness * lightColor / lightDist;
	vec3 diffuse = lightColor / lightDist;
	
	outColor = vec4(diffuse, 1) * textureColor;
	if (reflectAmnt > 0.5) {	
		vec3 unitCamera = normalize(toCameraVector);
		vec3 reflectedLight = reflect(-unitLight, unitNormal);
		float specFactor = dot(reflectedLight, unitCamera);
		specFactor = max(specFactor, 0.0);
		float dampedFactor = pow(specFactor, shineDamper);
		vec3 specular = dampedFactor * reflectivity * lightColor / lightDist;

		outColor = outColor + vec4(specular, 1.0);
	}
	
	outColor = mix(vec4(skyColor, 1.0), outColor, fogFadeAmnt);
	
}