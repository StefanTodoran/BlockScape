#version 400 core

in vec3 position;
in vec2 texture;
in vec3 normal;

out vec2 textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float fogFadeAmnt;

uniform mat4 transformMatrix;
uniform mat4 projectMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

const float density = 0.007;
const float gradient = 2.5;

void main(void) {
	
	vec4 worldPos = transformMatrix * vec4(position, 1.0);
	vec4 posRelToCam = viewMatrix * worldPos;
	gl_Position = projectMatrix * posRelToCam;
	textureCoords = texture;

	surfaceNormal = (transformMatrix * vec4(normal, 0.0)).xyz;
	toLightVector = lightPosition - worldPos.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPos.xyz;
	
	float distance = length(posRelToCam.xyz);
	fogFadeAmnt = exp(-pow((distance * density), gradient));
	fogFadeAmnt = clamp(fogFadeAmnt, 0.0, 1.0);
}